import { resolveBlockScalar } from '../compose/resolve-block-scalar.js';
import { resolveFlowScalar } from '../compose/resolve-flow-scalar.js';
import { YAMLParseError } from '../errors.js';
import { stringifyString } from '../stringify/stringifyString.js';

function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message) => {
            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError)
                onError(offset, code, message);
            else
                throw new YAMLParseError([offset, offset + 1], code, message);
        };
        switch (token.type) {
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
                return resolveFlowScalar(token, strict, _onError);
            case 'block-scalar':
                return resolveBlockScalar(token, strict, _onError);
        }
    }
    return null;
}
/**
 * Create a new scalar token with `value`
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.
 * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.
 * @param context.indent The indent level of the token.
 * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.
 * @param context.offset The offset position of the token.
 * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.
 */
function createScalarToken(value, context) {
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;
    const source = stringifyString({ type, value }, {
        implicitKey,
        indent: indent > 0 ? ' '.repeat(indent) : '',
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
    });
    const end = context.end ?? [
        { type: 'newline', offset: -1, indent, source: '\n' }
    ];
    switch (source[0]) {
        case '|':
        case '>': {
            const he = source.indexOf('\n');
            const head = source.substring(0, he);
            const body = source.substring(he + 1) + '\n';
            const props = [
                { type: 'block-scalar-header', offset, indent, source: head }
            ];
            if (!addEndtoBlockProps(props, end))
                props.push({ type: 'newline', offset: -1, indent, source: '\n' });
            return { type: 'block-scalar', offset, indent, props, source: body };
        }
        case '"':
            return { type: 'double-quoted-scalar', offset, indent, source, end };
        case "'":
            return { type: 'single-quoted-scalar', offset, indent, source, end };
        default:
            return { type: 'scalar', offset, indent, source, end };
    }
}
/**
 * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.
 *
 * Best efforts are made to retain any comments previously associated with the `token`,
 * though all contents within a collection's `items` will be overwritten.
 *
 * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,
 * as this function does not support any schema operations and won't check for such conflicts.
 *
 * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.
 * @param value The string representation of the value, which will have its content properly indented.
 * @param context.aft",
	
	["blq000p0"] = "After !DIST! !UNIT! turn slightly right !NG_COMMAND_1! and cross the square",
	
	["a0u00q00"] = "Now turn sharply left !NG_COMMAND_1! , cross the park",
	
	["blw00q00"] = "After !DIST! !UNIT! turn slightly left !NG_COMMAND_1! , cross the park",
	
	["a0v00q00"] = "Now turn left !NG_COMMAND_1! , cross the park",
	
	["blp000o0"] = "After !DIST! !UNIT! take the street on the right !NG_COMMAND_1! and go through the building",
	
	["a0r00r00"] = "Now turn right !NG_COMMAND_1! , take the stairs",
	
	["a0v00g00"] = "Now turn left !NG_COMMAND_1! onto the footpath",
	
	["a0u00r00"] = "Now turn sharply left !NG_COMMAND_1! , take the stairs",
	
	["a0n000t0"] = "Now walk straight ahead !NG_COMMAND_1! and take the escalator",
	
	["a0x000r0"] = "Now take the street on the left !NG_COMMAND_1! and take the stairs",
	
	["blr000p0"] = "After !DIST! !UNIT! turn right !NG_COMMAND_1! and cross the square",
	
	["a0o00r00"] = "Now take the street in the middle !NG_COMMAND_1! , take the stairs",
	
	["blq000o0"] = "After !DIST! !UNIT! turn slightly right !NG_COMMAND_1! and go through the building",
	
	["a0q00s00"] = "Now turn slightly right !NG_COMMAND_1! , take the lift",
	
	["a0r00s00"] = "Now turn right !NG_COMMAND_1! , take the lift",
	
	["a0q000r0"] = "Now turn slightly right !NG_COMMAND_1! and take the stairs",
	
	["blo000p0"] = "After !DIST! !UNIT! take the street in the middle !NG_COMMAND_1! and cross the square",
	
	["blw00p00"] = "After !DIST! !UNIT! turn slightly left !NG_COMMAND_1! , cross the square",
	
	["a0x00s00"] = "Now take the street on the left !NG_COMMAND_1! , take the lift",
	
	["a0n00d00"] = "Now walk straight ahead !NG_COMMAND_1! onto !STREET!",
	
	["a0s00s00"] = "Now turn sharply right !NG_COMMAND_1! , take the lift",
	
	["a0w00s00"] = "Now turn slightly left !NG_COMMAND_1! , take the lift",
	
	["blq00t00"] = "After !DIST! !UNIT! turn slightly right !NG_COMMAND_1! , take the escalator",
	
	["a0o00s00"] = "Now take the street in the middle !NG_COMMAND_1! , take the lift",
	
	["a0n00t00"] = "Now walk straight ahead !NG_COMMAND_1! , take the escalator",
	
	["bls00g00"] = "After !DIST! !UNIT! turn sharply right !NG_COMMAND_1! onto the footpath",
	
	["blo000o0"] = "After !DIST! !UNIT! take the street in the middle !NG_COMMAND_1! and go through the building",
	
	["a0r00o00"] = "Now turn right !NG_COMMAND_1! , go through the building",
	
	["blv000t0"] = "After !DIST! !UNIT! turn left !NG_COMMAND_1! and take the escalator",
	
	["a0w000q0"] = "Now turn slightly left !NG_COMMAND_1! and cross the park",
	
	["a0r00t00"] = "Now turn right !NG_COMMAND_1! , take the escalator",
	
	["a0s00t00"] = "Now turn sharply right !NG_COMMAND_1! , take the escalator",
	
	["a0u00t00"] = "Now turn sharply left !NG_COMMAND_1! , take the escalator",
	
	["a0v00t00"] = "Now turn left !NG_COMMAND_1! , take the escalator",
	
	["a0q00o00"] = "Now turn slightly right !NG_COMMAND_1! , go through the building",
	
	["a0n00o00"] = "Now walk straight ahead !NG_COMMAND_1! , go through the building",
	
	["a0p00o00"] = "Now take the street on the right !NG_COMMAND_1! , go through the building",
	
	["blq000s0"] = "After !DIST! !UNIT! turn slightly right !NG_COMMAND_1! and take the lift",
	
	["a0p000s0"] = "Now take the street on the right !NG_COMMAND_1! and take the lift",
	
	["blu000s0"] = "After !DIST! !UNIT! turn sharply left !NG_COMMAND_1! and take the lift",
	
	["a0x00o00"] = "Now take the street on the left !NG_COMMAND_1! , go through the building",
	
	["a0p00t00"] = "Now take the street on the right !NG_COMMAND_1! , take the escalator",
	
	["f0000bc0"] = "Head !ORIENTATION! on !STREET! towards !SIGNPOST!",
	
	["a0o00o00"] = "Now take the street in the middle !NG_COMMAND_1! , go through the building",
	
	["a0x000p0"] = "Now take the street on the left !NG_COMMAND_1! and cross the square",
	
	["a0r000p0"] = "Now turn right !NG_COMMAND_1! and cross the square",
	
	["a0s000p0"] = "Now turn sharply right !NG_COMMAND_1! and cross the square",
	
	["a0u           Object.assign(token, { type, source, end });
            break;
        }
        case 'block-map':
        case 'block-seq': {
            const offset = token.offset + source.length;
            const nl = { type: 'newline', offset, indent: token.indent, source: '\n' };
            delete token.items;
            Object.assign(token, { type, source, end: [nl] });
            break;
        }
        default: {
            const indent = 'indent' in token ? token.indent : -1;
            const end = 'end' in token && Array.isArray(token.end)
                ? token.end.filter(st => st.type === 'space' ||
                    st.type === 'comment' ||
                    st.type === 'newline')
                : [];
            for (const key of Object.keys(token))
                if (key !== 'type' && key !== 'offset')
                    delete token[key];
            Object.assign(token, { type, indent, source, end });
        }
    }
}

export { createScalarToken, resolveAsScalar, setScalarValue };
