
// Hierarchy Class Constants
containerDivId = "main-board";
containerDivClass = "bulletin-board";
itemSectionPrefix = "bulletin-";
contentPrefix = "content-";
itemSectionClass = "bulletin";
itemHeaderClass = "header";
iconBackgroundClass = "iconBackground";
iconClass = "icon";
itemTitleClass = "title";
contentClass = "content"
collapsiblePrefix = "collapsible-";
buttonPrefix = "button";
bulletinItemTag = "SECTION";

visualClassSuffix = "-visual";

errorEncountered = false;
currentItemValid = false;

// A key code "enum" for better readability
keyCode = {
	TAB: 9,
	ENTER: 13,
	ESC: 27,
	LEFT: 37,
	UP: 38,
	RIGHT: 39,
	DOWN: 40
}

// Disable ctrl+wheel and pinch from zooming
document.addEventListener("wheel", function(event){
    if (event.ctrlKey){
        event.preventDefault();
    }
});

// Keyboard event handler
document.addEventListener("keydown", function(event){
    event.stopPropagation();

    if (event.keyCode === keyCode["TAB"]) {
        document.body.classList.add("show-outline");
        return;
    }

    var activeElement = document.activeElement;
    if (activeElement.tagName === bulletinItemTag) {
        var targetElement = null;

        if (event.keyCode === keyCode["UP"]) {
            var targetElement = activeElement.previousElementSibling;
        } else if (event.keyCode === keyCode["DOWN"]) {
            targetElement = activeElement.nextElementSibling;
        }

        if (targetElement !== null) {
            document.body.classList.add("show-outline");
            targetElement.setAttribute("tabindex", 0);
            targetElement.focus();
            activeElement.removeAttribute("tabindex");
        }
    }
});

// Whenever pointer is down, remove focus outlines from all object
document.addEventListener("pointerdown", function(event){
    document.body.classList.remove("show-outline");
});

function onBulletinListFocused() {
    var item = document.querySelector(bulletinItemTag + "[tabindex='0']");
    if (item != null) {
        item.focus();
        document.body.removeAttribute("tabindex");
    }
}

function applyDarkTheme() {
    let s = document.getElementById('theme-styles');
    s.href = 'bulletin_board_dark.css';
}
function applyLightTheme() {
    let s = document.getElementById('theme-styles');
    s.href = 'bulletin_board_light.css';
}

function addBreakToElement(parent)
{
    parent.appendChild(document.createElement("br"));
}

var collapsibleDivCount = 1;
function addCollapsibleContent(bodyInfo, parent) {
    if (errorEncountered)
        return;

    var collapsingContainer = document.createElement("div");
    collapsingContainer.className = collapsiblePrefix + contentClass;
    collapsingContainer.id = collapsiblePrefix + collapsibleDivCount;
    collapsingContainer.hidden = true;
    var button = document.createElement("a");
    var message = document.createTextNode(bodyInfo.collapsedText);
    button.otherLabel = bodyInfo.expandedText;
    button.appendChild(message);
    button.class = collapsiblePrefix + buttonPrefix;
    button.id = button.class + "-" + collapsibleDivCount;
    button.href = "#" + button.id;

    button.onclick = function() {
        collapsingContainer.hidden = !collapsingContainer.hidden;
        var swapLabel = button.otherLabel;
        button.otherLabel = button.innerHTML;
        button.innerHTML = swapLabel;
    };

    collapsibleDivCount++;
    addBodyItems(bodyInfo.data, collapsingContainer);

    if (!errorEncountered) {
        parent.appendChild(collapsingContainer);
        addBreakToElement(parent);
        parent.appendChild(button);
    }
    else {
        errorEncountered = false;
    }
}

var animationCount = 1;
function animationAnchorDiv() {
    var anchorDiv = document.createElement("div");
    anchorDiv.className = "animation-anchor";
    anchorDiv.id = "animation_" + animationCount;
    animationCount++;

    return anchorDiv;
}

function createAnimationFromConfig(animationInfo, animationAnchorDiv) {
    var shouldAutoplay = true;

    if ("autoplay" in animationInfo) {
        shouldAutoplay = animationInfo.autoplay;
    }

    var shouldLoop = true;
    if ("loop" in animationInfo) {
        shouldLoop = animationInfo.loop;
    }

    var animationParameters = JSON.parse(animationInfo.data);

    var params = {
        container: animationAnchorDiv,
		renderer: 'svg',
		loop: shouldLoop,
		autoplay: shouldAutoplay,
		animationData: animationParameters
    }
    var anim;
    if (bodymovin)
      anim = bodymovin.loadAnimation(params);
}

function addAnimationContent(bodyInfo, parent) {
    var anchorDiv = animationAnchorDiv();

    createAnimationFromConfig(bodyInfo, anchorDiv);

    var classes = " ";
    if ("size" in bodyInfo) {
        classes += bodyInfo.size.toLowerCase() + visualClassSuffix;
    }
    anchorDiv.className += classes;

    parent.appendChild(anchorDiv);
    currentItemValid = true;
}

function addImageContent(bodyInfo, parent) {
    var imageTag = document.createElement("img");
    imageTag.setAttribute("aria-hidden", "true");

    if ("size" in bodyInfo) {
        imageTag.className = bodyInfo.size.toLowerCase() + visualClassSuffix;
    }

    imageTag.src = bodyInfo.data;
    parent.appendChild(imageTag);
    addBreakToElement(parent);
    currentItemValid = true;
}

function addTextContent(bodyInfo, parent) {
    var paragraphTag = document.createElement("span");
    paragraphTag.setAttribute("role", "text");
    var message = document.createTextNode(bodyInfo.data);
    paragraphTag.appendChild(message);
    parent.appendChild(paragraphTag);
    addBreakToElement(parent);
    currentItemValid = true;
}

var ContentType  = {
    Text  : 'Text',
    Image     : 'ImageUrl',
    Animation : 'AnimationData',
    Collapsible : 'Collapsible'
};

function addBodyItems(bodyArray, parent) {
    for (var i in bodyArray) {
        var content = bodyArray[i];
        
        if (content == null) {
            errorEncountered = true;
            // TODO: (MaAllen) - add error reporting for null items

            return;
        }

        if (!content.type ||
            !content.data ) 
        {
            // TODO: (MaAllen) - add error reporting for invalid body items

            continue;
        }

        switch (content.type)
        {
            case ContentType.Text:
                addTextContent(content, parent);
                break;
            case ContentType.Image:
                addImageContent(content, parent);
                break;
            case ContentType.Animation:
                addAnimationContent(content, parent);
                break;
            case ContentType.Collapsible:
                addCollapsibleContent(content, parent);
                break;
            default:
                // TODO: (MaAllen) - Add Error Handling for Unexpected Type
                break;
        }
    }
}

function addHeader(titleInfo, iconInfo, parent) {
    
    if (!iconInfo ||
        !"data" in iconInfo || 
        !"type" in iconInfo) {
        errorEncountered = true;
        return;
    }

    var headerTag = document.createElement("div");
    headerTag.className = itemHeaderClass;
    headerTag.setAttribute("aria-hidden", "true");

    var iconTag;
    switch (iconInfo.type)
    {
    case ContentType.Image:
        iconTag = document.createElement("img");
        iconTag.src = iconInfo.data;
        iconTag.setAttribute("aria-hidden", "true");
        break;
    case ContentType.Animation:
        iconTag = animationAnchorDiv();
        createAnimationFromConfig(iconInfo, iconTag);
        break;
    default:
        // TODO: (MaAllen) - Add Error Handling for icon type
        return;
    }

    iconTag.className = iconClass;

    var iconDiv;
    iconDiv = document.createElement("div");
    iconDiv.className = iconBackgroundClass;
    iconDiv.appendChild(iconTag);

    headerTag.appendChild(iconDiv);
    var t interface, returns a Checker for the argument-list required to call
     * the given method of this interface. E.g. if this Checker is for the interface:
     *    interface Foo {
     *      find(s: string, pos?: number): number;
     *    }
     * Then methodArgs("find").check(...) will succeed for ["foo"] and ["foo", 3], but not for [17].
     */
    Checker.prototype.methodArgs = function (methodName) {
        var tfunc = this._getMethod(methodName);
        return new Checker(this.suite, tfunc.paramList);
    };
    /**
     * If this checker is for an interface, returns a Checker for the return value of the given
     * method of this interface.
     */
    Checker.prototype.methodResult = function (methodName) {
        var tfunc = this._getMethod(methodName);
        return new Checker(this.suite, tfunc.result);
    };
    /**
     * If this checker is for a function, returns a Checker for its argument-list.
     */
    Checker.prototype.getArgs = function () {
        if (!(this.ttype instanceof types_1.TFunc)) {
            throw new Error("getArgs() applied to non-function");
        }
        return new Checker(this.suite, this.ttype.paramList);
    };
    /**
     * If this checker is for a function, returns a Checker for its result.
     */
    Checker.prototype.getResult = function () {
        if (!(this.ttype instanceof types_1.TFunc)) {
            throw new Error("getResult() applied to non-function");
        }
        return new Checker(this.suite, this.ttype.result);
    };
    /**
     * Return the type for which this is a checker.
     */
    Checker.prototype.getType = function () {
        return this.ttype;
    };
    /**
     * Actual implementation of check() and strictCheck().
     */
    Checker.prototype._doCheck = function (checkerFunc, value) {
        var noopCtx = new util_1.NoopContext();
        if (!checkerFunc(value, noopCtx)) {
            var detailCtx = new util_1.DetailContext();
            checkerFunc(value, detailCtx);
            throw detailCtx.getError(this._path);
        }
    };
    Checker.prototype._doValidate = function (checkerFunc, value) {
        var noopCtx = new util_1.NoopContext();
        if (checkerFunc(value, noopCtx)) {
            return null;
        }
        var detailCtx = new util_1.DetailContext();
        checkerFunc(value, detailCtx);
        return detailCtx.getErrorDetail(this._path);
    };
    Checker.prototype._getMethod = function (methodName) {
        var ttype = this.props.get(methodName);
        if (!ttype) {
            throw new Error("Type has no property " + methodName);
        }
        if (!(ttype instanceof types_1.TFunc)) {
            throw new Error("Property " + methodName + " is not a method");
        }
        return ttype;
    };
    return Checker;
}());
exports.Checker = Checker;
